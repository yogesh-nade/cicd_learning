name: Backend CI/CD to Render

on:
  push:
    branches: [ main ]
    paths: [ 'backend/**' ]

jobs:
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: Install dependencies
      run: |
        cd backend
        npm install
        echo "✅ Dependencies installed"
        
    - name: Deploy to Render
      env:
        RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
      run: |
        echo "🚀 Deploying to Render..."
        curl -X POST "$RENDER_DEPLOY_HOOK_URL"
        echo "✅ Deployment triggered"
        
    - name: Wait for deployment
      run: |
        echo "⏳ Waiting 60 seconds for deployment..."
        sleep 60
        
    - name: Test deployment
      env:
        RENDER_SERVICE_URL: ${{ secrets.RENDER_SERVICE_URL }}
      run: |
        echo "🧪 Testing deployment..."
        response=$(curl -s "$RENDER_SERVICE_URL/health")
        echo "Health check response: $response"
        echo "✅ Deployment successful!"
        fi

    # Wait and verify deployment
    - name: Verify deployment
      env:
        RENDER_SERVICE_URL: ${{ secrets.RENDER_SERVICE_URL }}
      run: |
        if [ -z "$RENDER_SERVICE_URL" ]; then
          echo "⚠️  RENDER_SERVICE_URL not configured, skipping verification"
          exit 0
        fi
        
        echo "⏳ Waiting for deployment to complete..."
        sleep 45  # Give Render time to start deployment
        
        # Check deployment status
        for i in {1..20}; do
          echo "🔍 Checking service health... (attempt $i/20)"
          
          if response=$(curl -s -f "$RENDER_SERVICE_URL/health" 2>/dev/null); then
            echo "✅ Service is responding!"
            echo "📊 Health check response:"
            echo "$response" | jq '.' 2>/dev/null || echo "$response"
            break
          elif [ $i -eq 20 ]; then
            echo "❌ Service failed to respond after 20 attempts"
            echo "🔍 Trying root endpoint..."
            curl -s "$RENDER_SERVICE_URL/" || echo "Root endpoint also not responding"
            exit 1
          else
            echo "⏳ Service not ready yet, waiting..."
            sleep 15
          fi
        done

    # Post-deployment tests
    - name: Test API endpoints
      env:
        RENDER_SERVICE_URL: ${{ secrets.RENDER_SERVICE_URL }}
      run: |
        if [ -n "$RENDER_SERVICE_URL" ]; then
          echo "🧪 Testing API endpoints..."
          
          # Test root endpoint
          echo "Testing GET /"
          curl -f -s "$RENDER_SERVICE_URL/" > /dev/null && echo "✅ Root endpoint OK" || echo "❌ Root endpoint failed"
          
          # Test notes endpoint
          echo "Testing GET /api/notes"
          curl -f -s "$RENDER_SERVICE_URL/api/notes" > /dev/null && echo "✅ Notes endpoint OK" || echo "❌ Notes endpoint failed"
          
          # Test health endpoint
          echo "Testing GET /health"
          curl -f -s "$RENDER_SERVICE_URL/health" > /dev/null && echo "✅ Health endpoint OK" || echo "❌ Health endpoint failed"
        fi

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
          echo "✅ **Backend Deployment:** Success" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ secrets.RENDER_SERVICE_URL }}" ]; then
            echo "🌐 **Service URL:** ${{ secrets.RENDER_SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ **Backend Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Check Render dashboard for detailed deployment logs" >> $GITHUB_STEP_SUMMARY
        echo "- Verify API endpoints are working correctly" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor application performance and logs" >> $GITHUB_STEP_SUMMARY